'use client';

import { useState, useEffect } from 'react';
import { User, DocumentShare } from '@prisma/client'; // Use DocumentShare
import { Loader2, Trash2, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { toast } from '@/components/ui/use-toast';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Label } from '@/components/ui/label'; // Import Label
import { useUsers } from '@/hooks/useUsers'; 
import { usePermissions } from '@/hooks/usePermissions'; 
import { useUpsertPermission, useRemovePermission } from '@/hooks/usePermissionMutations';
import { cn } from '@/lib/utils';

// Define the expected shape for initialShares with user details
// Use DocumentShare which should be generated by Prisma
type InitialShare = DocumentShare & { 
  user: { id: string; name: string | null; email: string | null; image: string | null };
};

// Define PermissionLevel type locally as it's not an enum in schema
type PermissionLevel = 'VIEW' | 'EDIT';

interface ShareModalProps {
  open: boolean;
  onClose: () => void;
  documentId: string;
  documentTitle: string;
}

export function ShareModal({
  open,
  onClose,
  documentId,
  documentTitle
}: ShareModalProps) {
  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);
  const [permissionLevel, setPermissionLevel] = useState<PermissionLevel>('VIEW'); // Default to 'VIEW' string

  // Fetch existing permissions for this document
  const { data: initialSharesData, isLoading: loadingShares, refetch: refetchShares } = usePermissions(documentId, open); 
  // Cast the fetched data to the correct type
  const initialShares: InitialShare[] = initialSharesData as InitialShare[] || [];

  // Fetch all users (for selection dropdown)
  const { data: allUsers, isLoading: loadingUsers } = useUsers(); // Remove 'open' argument

  const { mutate: upsertPerm, isPending: isUpserting } = useUpsertPermission();
  const { mutate: removePerm, isPending: isRemoving } = useRemovePermission();
  const [removingPermissionId, setRemovingPermissionId] = useState<string | null>(null);

  // Reset local state when modal opens/closes or documentId changes
  useEffect(() => {
    if (open) {
      setSelectedUserId(null);
      setPermissionLevel('VIEW'); // Use string literal 'VIEW'
      refetchShares(); // Refetch permissions when modal opens
    }
  }, [open, documentId, refetchShares]);

  const handleAddShare = () => {
    if (!selectedUserId) {
      toast({ variant: 'destructive', title: 'Error', description: 'Please select a user to share with.' });
      return;
    }

    upsertPerm({
      documentId,
      targetUserId: selectedUserId,
      level: permissionLevel,
    }, {
      onSuccess: (newPerm) => {
        toast({ title: 'Success', description: `Document shared with ${newPerm.userId}.` }); // Improve message later
        setSelectedUserId(null); 
        // Query invalidation handled by hook
      },
      onError: (error: Error) => { // Add type to error
        toast({ variant: 'destructive', title: 'Error', description: `Failed to share: ${error.message}` });
      }
    });
  };

  const handleRemoveShare = (permissionId: string) => {
    setRemovingPermissionId(permissionId);
    removePerm({ permissionId, documentId }, {
      onSuccess: () => {
        toast({ title: 'Success', description: 'Permission removed.' });
        // Query invalidation handled by hook
      },
      onError: (error: Error) => { // Add type to error
        toast({ variant: 'destructive', title: 'Error', description: `Failed to remove permission: ${error.message}` });
      },
      onSettled: () => {
        setRemovingPermissionId(null);
      }
    });
  };

  // Filter out users who already have permissions or the owner (assuming owner isn't in shares)
  // TODO: Need ownerId to filter owner reliably
  const availableUsers = allUsers?.filter(user => 
    !initialShares?.some((share: InitialShare) => share.userId === user.id)
    // && user.id !== ownerId // Add owner check later
  );

  const isLoading = loadingShares || loadingUsers; // Combine loading states

  return (
    <Dialog open={open} onOpenChange={(openState) => !openState && onClose()}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>Share "{documentTitle}"</DialogTitle>
          <DialogDescription>
            Manage who can access this document.
          </DialogDescription>
        </DialogHeader>

        {/* Existing Shares Section */}
        <div className="space-y-2">
          <h4 className="text-sm font-medium text-muted-foreground">Currently Shared With</h4>
          <ScrollArea className="h-32 border rounded-md p-2">
            {isLoading && !initialShares ? (
               <div className="flex items-center justify-center p-4"><Loader2 className="h-5 w-5 animate-spin" /></div>
            ) : initialShares && initialShares.length > 0 ? (
              <ul className="space-y-1">
                {initialShares.map((share: InitialShare) => ( // Add type to share
                  <li key={share.id} className="flex items-center justify-between text-sm p-1 hover:bg-muted rounded">
                    <div>
                      <span className="font-medium">{share.user.name || share.user.email}</span>
                      <Badge variant="outline" className="ml-2">{share.permission}</Badge> {/* Use share.permission */}
                    </div>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-6 w-6"
                      onClick={() => handleRemoveShare(share.id)}
                      disabled={isRemoving && removingPermissionId === share.id}
                      aria-label={`Remove permission for ${share.user.name || share.user.email}`}
                    >
                      {isRemoving && removingPermissionId === share.id ? (
                        <Loader2 className="h-3 w-3 animate-spin" />
                      ) : (
                        <Trash2 className="h-3 w-3 text-destructive" />
                      )}
                    </Button>
                  </li>
                ))}
              </ul>
            ) : (
               <p className="text-xs text-muted-foreground italic text-center py-4">Not shared with anyone yet.</p>
            )}
          </ScrollArea>
        </div>

        {/* Add New Share Section */}
        <div className="space-y-4 pt-4 border-t">
          <h4 className="text-sm font-medium text-muted-foreground">Add New Share</h4>
          {loadingUsers ? (
            <div className="flex items-center justify-center p-4">
              <Loader2 className="h-6 w-6 animate-spin" />
            </div>
          ) : (
            <div className="grid grid-cols-3 items-end gap-4">
              <div className="col-span-2 space-y-2">
                <Label htmlFor="user-select">User</Label>
                <Select
                  value={selectedUserId ?? ''}
                  onValueChange={(value) => setSelectedUserId(value || null)}
                >
                  <SelectTrigger id="user-select">
                    <SelectValue placeholder="Select a user..." />
                  </SelectTrigger>
                  <SelectContent>
                    {availableUsers && availableUsers.length > 0 ? (
                      availableUsers.map((user) => (
                        <SelectItem key={user.id} value={user.id}>
                          {user.name || user.email}
                        </SelectItem>
                      ))
                    ) : (
                      <div className="p-2 text-sm text-muted-foreground italic">No users available</div>
                    )}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="permission-level">Permission</Label>
                <Select
                  value={permissionLevel}
                  onValueChange={(value: PermissionLevel) => setPermissionLevel(value)} // Use local PermissionLevel type
                >
                  <SelectTrigger id="permission-level">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="VIEW">View</SelectItem> {/* Use string values */}
                    <SelectItem value="EDIT">Edit</SelectItem> {/* Use string values */}
                  </SelectContent>
                </Select>
              </div>
            </div>
          )}
        </div>

        <DialogFooter className="mt-4">
          <Button variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button onClick={handleAddShare} disabled={!selectedUserId || isUpserting}>
            {isUpserting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
            Add Share
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
